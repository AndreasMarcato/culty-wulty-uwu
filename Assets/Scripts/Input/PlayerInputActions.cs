//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerInputOOC"",
            ""id"": ""6efcfd0b-71fd-44b2-b0c9-c2d412ace07f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""252afb39-9309-4a53-ae4f-8be8f066f0a4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InteractTap"",
                    ""type"": ""Button"",
                    ""id"": ""21b133bd-b913-4631-825d-cdc70953b910"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractHold"",
                    ""type"": ""Button"",
                    ""id"": ""5a587dd4-c682-46f0-8d4c-d07f23f11cf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""167de49c-3de7-40e9-ad6b-f48d0cadde45"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba1457da-df74-45e9-a096-0fc0be88ed8c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eb9a9dac-057a-4001-9be6-65758d773091"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7cf655c0-ae73-4466-a1d5-dc980a5e41f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f22f9921-3808-4a57-b201-222e1937e6ae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3dd1ccf5-ec4e-407e-9b20-fe5d02b4ed1e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5ba38fb-3bf0-4c10-842c-9dd422719dfb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInputIC"",
            ""id"": ""ecf73aea-c5ff-483d-98ac-4c85f960a1bc"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""7c6a3525-10c2-4676-a9ed-807676ddc3a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ab4f47a5-cac5-4e28-a707-61134bff3d9d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputOOC
        m_PlayerInputOOC = asset.FindActionMap("PlayerInputOOC", throwIfNotFound: true);
        m_PlayerInputOOC_Move = m_PlayerInputOOC.FindAction("Move", throwIfNotFound: true);
        m_PlayerInputOOC_InteractTap = m_PlayerInputOOC.FindAction("InteractTap", throwIfNotFound: true);
        m_PlayerInputOOC_InteractHold = m_PlayerInputOOC.FindAction("InteractHold", throwIfNotFound: true);
        // PlayerInputIC
        m_PlayerInputIC = asset.FindActionMap("PlayerInputIC", throwIfNotFound: true);
        m_PlayerInputIC_Newaction = m_PlayerInputIC.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputOOC
    private readonly InputActionMap m_PlayerInputOOC;
    private List<IPlayerInputOOCActions> m_PlayerInputOOCActionsCallbackInterfaces = new List<IPlayerInputOOCActions>();
    private readonly InputAction m_PlayerInputOOC_Move;
    private readonly InputAction m_PlayerInputOOC_InteractTap;
    private readonly InputAction m_PlayerInputOOC_InteractHold;
    public struct PlayerInputOOCActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerInputOOCActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerInputOOC_Move;
        public InputAction @InteractTap => m_Wrapper.m_PlayerInputOOC_InteractTap;
        public InputAction @InteractHold => m_Wrapper.m_PlayerInputOOC_InteractHold;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputOOC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputOOCActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputOOCActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputOOCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputOOCActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @InteractTap.started += instance.OnInteractTap;
            @InteractTap.performed += instance.OnInteractTap;
            @InteractTap.canceled += instance.OnInteractTap;
            @InteractHold.started += instance.OnInteractHold;
            @InteractHold.performed += instance.OnInteractHold;
            @InteractHold.canceled += instance.OnInteractHold;
        }

        private void UnregisterCallbacks(IPlayerInputOOCActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @InteractTap.started -= instance.OnInteractTap;
            @InteractTap.performed -= instance.OnInteractTap;
            @InteractTap.canceled -= instance.OnInteractTap;
            @InteractHold.started -= instance.OnInteractHold;
            @InteractHold.performed -= instance.OnInteractHold;
            @InteractHold.canceled -= instance.OnInteractHold;
        }

        public void RemoveCallbacks(IPlayerInputOOCActions instance)
        {
            if (m_Wrapper.m_PlayerInputOOCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputOOCActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputOOCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputOOCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputOOCActions @PlayerInputOOC => new PlayerInputOOCActions(this);

    // PlayerInputIC
    private readonly InputActionMap m_PlayerInputIC;
    private List<IPlayerInputICActions> m_PlayerInputICActionsCallbackInterfaces = new List<IPlayerInputICActions>();
    private readonly InputAction m_PlayerInputIC_Newaction;
    public struct PlayerInputICActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerInputICActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_PlayerInputIC_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputIC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputICActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputICActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputICActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputICActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IPlayerInputICActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IPlayerInputICActions instance)
        {
            if (m_Wrapper.m_PlayerInputICActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputICActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputICActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputICActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputICActions @PlayerInputIC => new PlayerInputICActions(this);
    public interface IPlayerInputOOCActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteractTap(InputAction.CallbackContext context);
        void OnInteractHold(InputAction.CallbackContext context);
    }
    public interface IPlayerInputICActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
